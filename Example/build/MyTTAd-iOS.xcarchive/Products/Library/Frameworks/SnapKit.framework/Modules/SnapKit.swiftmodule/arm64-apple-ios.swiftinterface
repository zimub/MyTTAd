// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name SnapKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import Foundation
@_exported import SnapKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers final public class Constraint {
  final public var layoutConstraints: [SnapKit.LayoutConstraint]
  final public var isActive: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, renamed: "activate()")
  final public func install()
  @available(*, deprecated, renamed: "deactivate()")
  final public func uninstall()
  final public func activate()
  final public func deactivate()
  @discardableResult
  final public func update(offset: any SnapKit.ConstraintOffsetTarget) -> SnapKit.Constraint
  @discardableResult
  final public func update(inset: any SnapKit.ConstraintInsetTarget) -> SnapKit.Constraint
  @available(iOS 11.0, tvOS 11.0, *)
  @discardableResult
  final public func update(inset: any SnapKit.ConstraintDirectionalInsetTarget) -> SnapKit.Constraint
  @discardableResult
  final public func update(priority: any SnapKit.ConstraintPriorityTarget) -> SnapKit.Constraint
  @discardableResult
  final public func update(priority: SnapKit.ConstraintPriority) -> SnapKit.Constraint
  @available(*, deprecated, renamed: "update(offset:)")
  final public func updateOffset(amount: any SnapKit.ConstraintOffsetTarget)
  @available(*, deprecated, renamed: "update(inset:)")
  final public func updateInsets(amount: any SnapKit.ConstraintInsetTarget)
  @available(*, deprecated, renamed: "update(priority:)")
  final public func updatePriority(amount: any SnapKit.ConstraintPriorityTarget)
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityRequired()
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityHigh()
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityMedium()
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityLow()
  @objc deinit
}
public typealias ConstraintInterfaceLayoutDirection = UIKit.UIUserInterfaceLayoutDirection
public struct ConstraintConfig {
  public static var interfaceLayoutDirection: SnapKit.ConstraintInterfaceLayoutDirection
}
public protocol ConstraintConstantTarget {
}
extension CoreFoundation.CGPoint : SnapKit.ConstraintConstantTarget {
}
extension CoreFoundation.CGSize : SnapKit.ConstraintConstantTarget {
}
extension UIKit.UIEdgeInsets : SnapKit.ConstraintConstantTarget {
}
@available(iOS 11.0, tvOS 11.0, *)
extension UIKit.NSDirectionalEdgeInsets : SnapKit.ConstraintConstantTarget {
}
@_hasMissingDesignatedInitializers public class ConstraintDescription {
  @objc deinit
}
@available(iOS 11.0, tvOS 11.0, *)
public typealias ConstraintDirectionalInsets = UIKit.NSDirectionalEdgeInsets
public protocol ConstraintDirectionalInsetTarget : SnapKit.ConstraintConstantTarget {
}
@available(iOS 11.0, tvOS 11.0, *)
extension UIKit.NSDirectionalEdgeInsets : SnapKit.ConstraintDirectionalInsetTarget {
}
public protocol ConstraintDSL {
  var target: Swift.AnyObject? { get }
  func setLabel(_ value: Swift.String?)
  func label() -> Swift.String?
}
extension SnapKit.ConstraintDSL {
  public func setLabel(_ value: Swift.String?)
  public func label() -> Swift.String?
}
public protocol ConstraintBasicAttributesDSL : SnapKit.ConstraintDSL {
}
extension SnapKit.ConstraintBasicAttributesDSL {
  public var left: SnapKit.ConstraintItem {
    get
  }
  public var top: SnapKit.ConstraintItem {
    get
  }
  public var right: SnapKit.ConstraintItem {
    get
  }
  public var bottom: SnapKit.ConstraintItem {
    get
  }
  public var leading: SnapKit.ConstraintItem {
    get
  }
  public var trailing: SnapKit.ConstraintItem {
    get
  }
  public var width: SnapKit.ConstraintItem {
    get
  }
  public var height: SnapKit.ConstraintItem {
    get
  }
  public var centerX: SnapKit.ConstraintItem {
    get
  }
  public var centerY: SnapKit.ConstraintItem {
    get
  }
  public var edges: SnapKit.ConstraintItem {
    get
  }
  public var directionalEdges: SnapKit.ConstraintItem {
    get
  }
  public var horizontalEdges: SnapKit.ConstraintItem {
    get
  }
  public var verticalEdges: SnapKit.ConstraintItem {
    get
  }
  public var directionalHorizontalEdges: SnapKit.ConstraintItem {
    get
  }
  public var directionalVerticalEdges: SnapKit.ConstraintItem {
    get
  }
  public var size: SnapKit.ConstraintItem {
    get
  }
  public var center: SnapKit.ConstraintItem {
    get
  }
}
public protocol ConstraintAttributesDSL : SnapKit.ConstraintBasicAttributesDSL {
}
extension SnapKit.ConstraintAttributesDSL {
  @available(*, deprecated, renamed: "lastBaseline")
  public var baseline: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  public var lastBaseline: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  public var firstBaseline: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var leftMargin: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var topMargin: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var rightMargin: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var bottomMargin: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var leadingMargin: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var trailingMargin: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var centerXWithinMargins: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var centerYWithinMargins: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var margins: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var directionalMargins: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var centerWithinMargins: SnapKit.ConstraintItem {
    get
  }
}
public typealias ConstraintInsets = UIKit.UIEdgeInsets
public protocol ConstraintInsetTarget : SnapKit.ConstraintConstantTarget {
}
extension Swift.Int : SnapKit.ConstraintInsetTarget {
}
extension Swift.UInt : SnapKit.ConstraintInsetTarget {
}
extension Swift.Float : SnapKit.ConstraintInsetTarget {
}
extension Swift.Double : SnapKit.ConstraintInsetTarget {
}
extension CoreFoundation.CGFloat : SnapKit.ConstraintInsetTarget {
}
extension UIKit.UIEdgeInsets : SnapKit.ConstraintInsetTarget {
}
@_hasMissingDesignatedInitializers final public class ConstraintItem {
  @objc deinit
}
public func == (lhs: SnapKit.ConstraintItem, rhs: SnapKit.ConstraintItem) -> Swift.Bool
@available(iOS 9.0, *)
public typealias ConstraintLayoutGuide = UIKit.UILayoutGuide
@available(iOS 9.0, macOS 10.11, *)
extension UIKit.UILayoutGuide {
  @_Concurrency.MainActor @preconcurrency public var snp: SnapKit.ConstraintLayoutGuideDSL {
    get
  }
}
@available(iOS 9.0, macOS 10.11, *)
public struct ConstraintLayoutGuideDSL : SnapKit.ConstraintAttributesDSL {
  @discardableResult
  public func prepareConstraints(_ closure: (_ make: SnapKit.ConstraintMaker) -> Swift.Void) -> [SnapKit.Constraint]
  public func makeConstraints(_ closure: (_ make: SnapKit.ConstraintMaker) -> Swift.Void)
  public func remakeConstraints(_ closure: (_ make: SnapKit.ConstraintMaker) -> Swift.Void)
  public func updateConstraints(_ closure: (_ make: SnapKit.ConstraintMaker) -> Swift.Void)
  public func removeConstraints()
  public var target: Swift.AnyObject? {
    get
  }
}
@available(iOS 8.0, *)
public typealias ConstraintLayoutSupport = UIKit.UILayoutSupport
@available(iOS 8.0, *)
public struct ConstraintLayoutSupportDSL : SnapKit.ConstraintDSL {
  public var target: Swift.AnyObject? {
    get
  }
  public var top: SnapKit.ConstraintItem {
    get
  }
  public var bottom: SnapKit.ConstraintItem {
    get
  }
  public var height: SnapKit.ConstraintItem {
    get
  }
}
@_hasMissingDesignatedInitializers public class ConstraintMaker {
  public var left: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var top: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var bottom: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var right: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var leading: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var trailing: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var width: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var height: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var centerX: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var centerY: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(*, deprecated, renamed: "lastBaseline")
  public var baseline: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var lastBaseline: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  public var firstBaseline: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leftMargin: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var rightMargin: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var topMargin: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var bottomMargin: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leadingMargin: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var trailingMargin: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerXWithinMargins: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerYWithinMargins: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var edges: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var horizontalEdges: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var verticalEdges: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var directionalEdges: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var directionalHorizontalEdges: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var directionalVerticalEdges: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var size: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var center: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var margins: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var directionalMargins: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerWithinMargins: SnapKit.ConstraintMakerExtendable {
    get
  }
  final public let item: any SnapKit.LayoutConstraintItem
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConstraintMakerEditable : SnapKit.ConstraintMakerPrioritizable {
  @discardableResult
  public func multipliedBy(_ amount: any SnapKit.ConstraintMultiplierTarget) -> SnapKit.ConstraintMakerEditable
  @discardableResult
  public func dividedBy(_ amount: any SnapKit.ConstraintMultiplierTarget) -> SnapKit.ConstraintMakerEditable
  @discardableResult
  public func offset(_ amount: any SnapKit.ConstraintOffsetTarget) -> SnapKit.ConstraintMakerEditable
  @discardableResult
  public func inset(_ amount: any SnapKit.ConstraintInsetTarget) -> SnapKit.ConstraintMakerEditable
  @available(iOS 11.0, tvOS 11.0, *)
  @discardableResult
  public func inset(_ amount: any SnapKit.ConstraintDirectionalInsetTarget) -> SnapKit.ConstraintMakerEditable
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConstraintMakerExtendable : SnapKit.ConstraintMakerRelatable {
  public var left: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var top: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var bottom: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var right: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var leading: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var trailing: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var width: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var height: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var centerX: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var centerY: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(*, deprecated, renamed: "lastBaseline")
  public var baseline: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var lastBaseline: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  public var firstBaseline: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leftMargin: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var rightMargin: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var topMargin: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var bottomMargin: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leadingMargin: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var trailingMargin: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerXWithinMargins: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerYWithinMargins: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var edges: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var horizontalEdges: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var verticalEdges: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var directionalEdges: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var directionalHorizontalEdges: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var directionalVerticalEdges: SnapKit.ConstraintMakerExtendable {
    get
  }
  public var size: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var margins: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var directionalMargins: SnapKit.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerWithinMargins: SnapKit.ConstraintMakerExtendable {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ConstraintMakerFinalizable {
  @discardableResult
  public func labeled(_ label: Swift.String) -> SnapKit.ConstraintMakerFinalizable
  public var constraint: SnapKit.Constraint {
    get
  }
  @objc deinit
}
@available(*, deprecated, message: "Use ConstraintMakerPrioritizable instead.")
public typealias ConstraintMakerPriortizable = SnapKit.ConstraintMakerPrioritizable
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConstraintMakerPrioritizable : SnapKit.ConstraintMakerFinalizable {
  @discardableResult
  public func priority(_ amount: SnapKit.ConstraintPriority) -> SnapKit.ConstraintMakerFinalizable
  @discardableResult
  public func priority(_ amount: any SnapKit.ConstraintPriorityTarget) -> SnapKit.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.required) instead.")
  @discardableResult
  public func priorityRequired() -> SnapKit.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.high) instead.")
  @discardableResult
  public func priorityHigh() -> SnapKit.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.medium) instead.")
  @discardableResult
  public func priorityMedium() -> SnapKit.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.low) instead.")
  @discardableResult
  public func priorityLow() -> SnapKit.ConstraintMakerFinalizable
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ConstraintMakerRelatable {
  @discardableResult
  public func equalTo(_ other: any SnapKit.ConstraintRelatableTarget, _ file: Swift.String = #file, _ line: Swift.UInt = #line) -> SnapKit.ConstraintMakerEditable
  @discardableResult
  public func equalToSuperview(_ file: Swift.String = #file, _ line: Swift.UInt = #line) -> SnapKit.ConstraintMakerEditable
  @discardableResult
  public func lessThanOrEqualTo(_ other: any SnapKit.ConstraintRelatableTarget, _ file: Swift.String = #file, _ line: Swift.UInt = #line) -> SnapKit.ConstraintMakerEditable
  @discardableResult
  public func lessThanOrEqualToSuperview(_ file: Swift.String = #file, _ line: Swift.UInt = #line) -> SnapKit.ConstraintMakerEditable
  @discardableResult
  public func greaterThanOrEqualTo(_ other: any SnapKit.ConstraintRelatableTarget, _ file: Swift.String = #file, line: Swift.UInt = #line) -> SnapKit.ConstraintMakerEditable
  @discardableResult
  public func greaterThanOrEqualToSuperview(_ file: Swift.String = #file, line: Swift.UInt = #line) -> SnapKit.ConstraintMakerEditable
  @objc deinit
}
extension SnapKit.ConstraintMakerRelatable {
  @discardableResult
  public func equalToSuperview<T>(_ closure: (SnapKit.ConstraintView) -> T, _ file: Swift.String = #file, line: Swift.UInt = #line) -> SnapKit.ConstraintMakerEditable where T : SnapKit.ConstraintRelatableTarget
  @discardableResult
  public func lessThanOrEqualToSuperview<T>(_ closure: (SnapKit.ConstraintView) -> T, _ file: Swift.String = #file, line: Swift.UInt = #line) -> SnapKit.ConstraintMakerEditable where T : SnapKit.ConstraintRelatableTarget
  @discardableResult
  public func greaterThanOrEqualTo<T>(_ closure: (SnapKit.ConstraintView) -> T, _ file: Swift.String = #file, line: Swift.UInt = #line) -> SnapKit.ConstraintMakerEditable where T : SnapKit.ConstraintRelatableTarget
}
public protocol ConstraintMultiplierTarget {
  var constraintMultiplierTargetValue: CoreFoundation.CGFloat { get }
}
extension Swift.Int : SnapKit.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.UInt : SnapKit.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.Float : SnapKit.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.Double : SnapKit.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
extension CoreFoundation.CGFloat : SnapKit.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
public protocol ConstraintOffsetTarget : SnapKit.ConstraintConstantTarget {
}
extension Swift.Int : SnapKit.ConstraintOffsetTarget {
}
extension Swift.UInt : SnapKit.ConstraintOffsetTarget {
}
extension Swift.Float : SnapKit.ConstraintOffsetTarget {
}
extension Swift.Double : SnapKit.ConstraintOffsetTarget {
}
extension CoreFoundation.CGFloat : SnapKit.ConstraintOffsetTarget {
}
public struct ConstraintPriority : Swift.ExpressibleByFloatLiteral, Swift.Equatable, Swift.Strideable {
  public typealias FloatLiteralType = Swift.Float
  public let value: Swift.Float
  public init(floatLiteral value: Swift.Float)
  public init(_ value: Swift.Float)
  public static var required: SnapKit.ConstraintPriority {
    get
  }
  public static var high: SnapKit.ConstraintPriority {
    get
  }
  public static var medium: SnapKit.ConstraintPriority {
    get
  }
  public static var low: SnapKit.ConstraintPriority {
    get
  }
  public static func == (lhs: SnapKit.ConstraintPriority, rhs: SnapKit.ConstraintPriority) -> Swift.Bool
  public func advanced(by n: SnapKit.ConstraintPriority.FloatLiteralType) -> SnapKit.ConstraintPriority
  public func distance(to other: SnapKit.ConstraintPriority) -> SnapKit.ConstraintPriority.FloatLiteralType
  public typealias Stride = SnapKit.ConstraintPriority.FloatLiteralType
}
public protocol ConstraintPriorityTarget {
  var constraintPriorityTargetValue: Swift.Float { get }
}
extension Swift.Int : SnapKit.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension Swift.UInt : SnapKit.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension Swift.Float : SnapKit.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension Swift.Double : SnapKit.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension CoreFoundation.CGFloat : SnapKit.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension UIKit.UILayoutPriority : SnapKit.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
public protocol ConstraintRelatableTarget {
}
extension Swift.Int : SnapKit.ConstraintRelatableTarget {
}
extension Swift.UInt : SnapKit.ConstraintRelatableTarget {
}
extension Swift.Float : SnapKit.ConstraintRelatableTarget {
}
extension Swift.Double : SnapKit.ConstraintRelatableTarget {
}
extension CoreFoundation.CGFloat : SnapKit.ConstraintRelatableTarget {
}
extension CoreFoundation.CGSize : SnapKit.ConstraintRelatableTarget {
}
extension CoreFoundation.CGPoint : SnapKit.ConstraintRelatableTarget {
}
extension UIKit.UIEdgeInsets : SnapKit.ConstraintRelatableTarget {
}
@available(iOS 11.0, tvOS 11.0, *)
extension UIKit.NSDirectionalEdgeInsets : SnapKit.ConstraintRelatableTarget {
}
extension SnapKit.ConstraintItem : SnapKit.ConstraintRelatableTarget {
}
extension UIKit.UIView : SnapKit.ConstraintRelatableTarget {
}
@available(iOS 9.0, macOS 10.11, *)
extension UIKit.UILayoutGuide : SnapKit.ConstraintRelatableTarget {
}
public typealias ConstraintView = UIKit.UIView
extension UIKit.UIView {
  @available(*, deprecated, renamed: "snp.left")
  @_Concurrency.MainActor @preconcurrency public var snp_left: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.top")
  @_Concurrency.MainActor @preconcurrency public var snp_top: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.right")
  @_Concurrency.MainActor @preconcurrency public var snp_right: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.bottom")
  @_Concurrency.MainActor @preconcurrency public var snp_bottom: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.leading")
  @_Concurrency.MainActor @preconcurrency public var snp_leading: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.trailing")
  @_Concurrency.MainActor @preconcurrency public var snp_trailing: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.width")
  @_Concurrency.MainActor @preconcurrency public var snp_width: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.height")
  @_Concurrency.MainActor @preconcurrency public var snp_height: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.centerX")
  @_Concurrency.MainActor @preconcurrency public var snp_centerX: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.centerY")
  @_Concurrency.MainActor @preconcurrency public var snp_centerY: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.baseline")
  @_Concurrency.MainActor @preconcurrency public var snp_baseline: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  @available(*, deprecated, renamed: "snp.lastBaseline")
  @_Concurrency.MainActor @preconcurrency public var snp_lastBaseline: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  @available(iOS, deprecated, renamed: "snp.firstBaseline")
  @_Concurrency.MainActor @preconcurrency public var snp_firstBaseline: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.leftMargin")
  @_Concurrency.MainActor @preconcurrency public var snp_leftMargin: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.topMargin")
  @_Concurrency.MainActor @preconcurrency public var snp_topMargin: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.rightMargin")
  @_Concurrency.MainActor @preconcurrency public var snp_rightMargin: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.bottomMargin")
  @_Concurrency.MainActor @preconcurrency public var snp_bottomMargin: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.leadingMargin")
  @_Concurrency.MainActor @preconcurrency public var snp_leadingMargin: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.trailingMargin")
  @_Concurrency.MainActor @preconcurrency public var snp_trailingMargin: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.centerXWithinMargins")
  @_Concurrency.MainActor @preconcurrency public var snp_centerXWithinMargins: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.centerYWithinMargins")
  @_Concurrency.MainActor @preconcurrency public var snp_centerYWithinMargins: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.edges")
  @_Concurrency.MainActor @preconcurrency public var snp_edges: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.size")
  @_Concurrency.MainActor @preconcurrency public var snp_size: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.center")
  @_Concurrency.MainActor @preconcurrency public var snp_center: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.margins")
  @_Concurrency.MainActor @preconcurrency public var snp_margins: SnapKit.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.centerWithinMargins")
  @_Concurrency.MainActor @preconcurrency public var snp_centerWithinMargins: SnapKit.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.prepareConstraints(_:)")
  @_Concurrency.MainActor @preconcurrency public func snp_prepareConstraints(_ closure: (_ make: SnapKit.ConstraintMaker) -> Swift.Void) -> [SnapKit.Constraint]
  @available(*, deprecated, renamed: "snp.makeConstraints(_:)")
  @_Concurrency.MainActor @preconcurrency public func snp_makeConstraints(_ closure: (_ make: SnapKit.ConstraintMaker) -> Swift.Void)
  @available(*, deprecated, renamed: "snp.remakeConstraints(_:)")
  @_Concurrency.MainActor @preconcurrency public func snp_remakeConstraints(_ closure: (_ make: SnapKit.ConstraintMaker) -> Swift.Void)
  @available(*, deprecated, renamed: "snp.updateConstraints(_:)")
  @_Concurrency.MainActor @preconcurrency public func snp_updateConstraints(_ closure: (_ make: SnapKit.ConstraintMaker) -> Swift.Void)
  @available(*, deprecated, renamed: "snp.removeConstraints()")
  @_Concurrency.MainActor @preconcurrency public func snp_removeConstraints()
  @_Concurrency.MainActor @preconcurrency public var snp: SnapKit.ConstraintViewDSL {
    get
  }
}
public struct ConstraintViewDSL : SnapKit.ConstraintAttributesDSL {
  @discardableResult
  public func prepareConstraints(_ closure: (_ make: SnapKit.ConstraintMaker) -> Swift.Void) -> [SnapKit.Constraint]
  public func makeConstraints(_ closure: (_ make: SnapKit.ConstraintMaker) -> Swift.Void)
  public func remakeConstraints(_ closure: (_ make: SnapKit.ConstraintMaker) -> Swift.Void)
  public func updateConstraints(_ closure: (_ make: SnapKit.ConstraintMaker) -> Swift.Void)
  public func removeConstraints()
  public var contentHuggingHorizontalPriority: Swift.Float {
    get
    nonmutating set
  }
  public var contentHuggingVerticalPriority: Swift.Float {
    get
    nonmutating set
  }
  public var contentCompressionResistanceHorizontalPriority: Swift.Float {
    get
    nonmutating set
  }
  public var contentCompressionResistanceVerticalPriority: Swift.Float {
    get
    nonmutating set
  }
  public var target: Swift.AnyObject? {
    get
  }
}
extension SnapKit.LayoutConstraint {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class LayoutConstraint : UIKit.NSLayoutConstraint {
  @_Concurrency.MainActor @preconcurrency public var label: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
public protocol LayoutConstraintItem : AnyObject {
}
@available(iOS 9.0, macOS 10.11, *)
extension UIKit.UILayoutGuide : SnapKit.LayoutConstraintItem {
}
extension UIKit.UIView : SnapKit.LayoutConstraintItem {
}
@available(iOS 8.0, *)
extension UIKit.UILayoutSupport {
  @_Concurrency.MainActor @preconcurrency public var snp: SnapKit.ConstraintLayoutSupportDSL {
    get
  }
}
